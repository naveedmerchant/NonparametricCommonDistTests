XT1 <- dataset1[1:(dlength*.3)]
XV1 <- dataset1[-(1:dlength*.3)]
XT2 <- dataset2[1:(dlength*.3)]
XV2 <- dataset2[-(1:dlength*.3)]
ExpectedKernML <- logmarg.kern(XT1,XV1)
set.seed(10000)
normdraw <- rnorm(1000,sd = 1)
unifdraw <- runif(1000)
mixturenormdraw <- rnorm(1000,mean = 3, sd = 1)*(unifdraw > 0.5) + rnorm(1000,mean = 3, sd = 1)*(unifdraw <= 0.5)
dlength <- 1000
dataset1 <- normdraw
dataset2 <- mixturenormdraw
XT1 <- dataset1[1:(dlength*.3)]
XV1 <- dataset1[-(1:dlength*.3)]
XT2 <- dataset2[1:(dlength*.3)]
XV2 <- dataset2[-(1:dlength*.3)]
ExpectedKernML <- logmarg.kern(XT1,XV1)
ExpectedKernML2 <- logmarg.kern(XT2,XV2)
ExpectedKernML
ExpectedKernML2
?rcauchy
library(rmutil)
source("MarginalLikIntfunctions.R")
set.seed(10000)
dlength <- 1000
LBF <- c()
LBF2 <- c()
dataset1 <- rcauchy(dlength)
dataset2 <- rcauchy(dlength)
setwd("~/NonparametricCommonDistTests")
library(rmutil)
source("MarginalLikIntfunctions.R")
set.seed(10000)
dlength <- 1000
LBF <- c()
LBF2 <- c()
dataset1 <- rcauchy(dlength)
dataset2 <- rcauchy(dlength)
XT1 <- dataset1[1:(dlength*.3)]
XV1 <- dataset1[-(1:dlength*.3)]
XT2 <- dataset2[1:(dlength*.3)]
XV2 <- dataset2[-(1:dlength*.3)]
XT1
sample(XT1)
library(rmutil)
source("MarginalLikIntfunctions.R")
set.seed(10000)
dlength <- 1000
LBF <- c()
LBF2 <- c()
dataset1 <- rcauchy(dlength)
dataset2 <- rcauchy(dlength)
for(i in 1:50)
{
dataset1 <- sample(dataset1)
dataset2 <- sample(dataset2)
XT1 <- dataset1[1:(dlength*.3)]
XV1 <- dataset1[-(1:dlength*.3)]
XT2 <- dataset2[1:(dlength*.3)]
XV2 <- dataset2[-(1:dlength*.3)]
ExpectedKernML <- logmarg.kern(XT1,XV1)[[2]] + logmarg.kern(XT2,XV2)[[2]]
ExpectedKernML2 <- logmarg.kern(c(XT1,XT2),c(XV1,XV2))[[2]]
RandKernML <- logmarg.kernMC(XT1,XV1, iter = 10000) + logmarg.kernMC(XT2,XV2,iter = 10000)
LBF[i] <- ExpectedKernML - ExpectedKernML2
}
plot(LBF)
LBF
tion(X1,X2,iter = 10000,importsize = 200)
{
Loglist <- c()
for(G in 1:30)
{
cauchsamp<- rcauchy(importsize)
poscauchsamp <- cauchsamp[cauchsamp > 0]
importancepart <- ((2*B*(1/poscauchsamp^2)*(exp(-(B^2)/(poscauchsamp)^2)) / sqrt(pi))) / (2*dcauchy(poscauchsamp))
prodlist1<-c()
for(z in 1:length(poscauchsamp))
{
prod <- 0
for(j in 1:n)
{
sum <- 0
for(i in 1:k)
{
sum <- sum + exp(-.5*((X2[j]-X1[i])/poscauchsamp[z])^2)
}
prod <- prod + log(sum) + log((1/sqrt(2*pi))) - log((k*poscauchsamp[z]))
}
prodlist1[z] <- prod + log(importancepart[z])
}
Loglist[G] <- logSumExp(prodlist1)
}
return(median(Loglist))
}
logmarg.kernMCimport=function(X1,X2,iter = 10000,importsize = 200)
{
Loglist <- c()
for(G in 1:30)
{
cauchsamp<- rcauchy(importsize)
poscauchsamp <- cauchsamp[cauchsamp > 0]
importancepart <- ((2*B*(1/poscauchsamp^2)*(exp(-(B^2)/(poscauchsamp)^2)) / sqrt(pi))) / (2*dcauchy(poscauchsamp))
prodlist1<-c()
for(z in 1:length(poscauchsamp))
{
prod <- 0
for(j in 1:n)
{
sum <- 0
for(i in 1:k)
{
sum <- sum + exp(-.5*((X2[j]-X1[i])/poscauchsamp[z])^2)
}
prod <- prod + log(sum) + log((1/sqrt(2*pi))) - log((k*poscauchsamp[z]))
}
prodlist1[z] <- prod + log(importancepart[z])
}
Loglist[G] <- logSumExp(prodlist1)
}
return(median(Loglist))
}
library(rmutil)
source("MarginalLikIntfunctions.R")
set.seed(10000)
dlength <- 1000
LBF <- c()
LBF2 <- c()
dataset1 <- rnorm(dlength)
dataset2 <- rnorm(dlength)
for(i in 1:50)
{
dataset1 <- sample(dataset1)
dataset2 <- sample(dataset2)
XT1 <- dataset1[1:(dlength*.3)]
XV1 <- dataset1[-(1:dlength*.3)]
XT2 <- dataset2[1:(dlength*.3)]
XV2 <- dataset2[-(1:dlength*.3)]
ExpectedKernML <- logmarg.kernMCimport(XT1,XV1)[[2]] + logmarg.kernMCimport(XT2,XV2)[[2]]
ExpectedKernML2 <- logmarg.kernMCimport(c(XT1,XT2),c(XV1,XV2))[[2]]
LBF[i] <- ExpectedKernML - ExpectedKernML2
}
plot(LBF)
dataset1 <- sample(dataset1)
dataset2 <- sample(dataset2)
XT1 <- dataset1[1:(dlength*.3)]
XV1 <- dataset1[-(1:dlength*.3)]
XT2 <- dataset2[1:(dlength*.3)]
XV2 <- dataset2[-(1:dlength*.3)]
ExpectedKernML <- logmarg.kernMCimport(XT1,XV1)[[2]] + logmarg.kernMCimport(XT2,XV2)[[2]]
ExpectedKernML2 <- logmarg.kernMCimport(c(XT1,XT2),c(XV1,XV2))[[2]]
LBF[i] <- ExpectedKernML - ExpectedKernML2
logmarg.kernMCimport=function(X1,X2,iter = 10000,importsize = 200)
{
R = quantile(X1,probs=c(.25,.75))
R=R[2]-R[1]
R = unname(R)
B = R / 1.35
Loglist <- c()
for(G in 1:30)
{
cauchsamp<- rcauchy(importsize)
poscauchsamp <- cauchsamp[cauchsamp > 0]
importancepart <- ((2*B*(1/poscauchsamp^2)*(exp(-(B^2)/(poscauchsamp)^2)) / sqrt(pi))) / (2*dcauchy(poscauchsamp))
prodlist1<-c()
for(z in 1:length(poscauchsamp))
{
prod <- 0
for(j in 1:n)
{
sum <- 0
for(i in 1:k)
{
sum <- sum + exp(-.5*((X2[j]-X1[i])/poscauchsamp[z])^2)
}
prod <- prod + log(sum) + log((1/sqrt(2*pi))) - log((k*poscauchsamp[z]))
}
prodlist1[z] <- prod + log(importancepart[z])
}
Loglist[G] <- logSumExp(prodlist1)
}
return(median(Loglist))
}
dataset1 <- sample(dataset1)
dataset2 <- sample(dataset2)
XT1 <- dataset1[1:(dlength*.3)]
XV1 <- dataset1[-(1:dlength*.3)]
XT2 <- dataset2[1:(dlength*.3)]
XV2 <- dataset2[-(1:dlength*.3)]
ExpectedKernML <- logmarg.kernMCimport(XT1,XV1)[[2]] + logmarg.kernMCimport(XT2,XV2)[[2]]
ExpectedKernML2 <- logmarg.kernMCimport(c(XT1,XT2),c(XV1,XV2))[[2]]
LBF[i] <- ExpectedKernML - ExpectedKernML2
logmarg.kernMCimport=function(X1,X2,iter = 1000,importsize = 200)
{
R = quantile(X1,probs=c(.25,.75))
R=R[2]-R[1]
R = unname(R)
B = R / 1.35
Loglist <- c()
k <- length(X1)
n <- length(X2)
for(G in 1:iter)
{
cauchsamp<- rcauchy(importsize)
poscauchsamp <- cauchsamp[cauchsamp > 0]
importancepart <- ((2*B*(1/poscauchsamp^2)*(exp(-(B^2)/(poscauchsamp)^2)) / sqrt(pi))) / (2*dcauchy(poscauchsamp))
prodlist1<-c()
for(z in 1:length(poscauchsamp))
{
prod <- 0
for(j in 1:n)
{
sum <- 0
for(i in 1:k)
{
sum <- sum + exp(-.5*((X2[j]-X1[i])/poscauchsamp[z])^2)
}
prod <- prod + log(sum) + log((1/sqrt(2*pi))) - log((k*poscauchsamp[z]))
}
prodlist1[z] <- prod + log(importancepart[z])
}
Loglist[G] <- logSumExp(prodlist1)
}
return(Loglist)
}
dataset1 <- sample(dataset1)
dataset2 <- sample(dataset2)
XT1 <- dataset1[1:(dlength*.3)]
XV1 <- dataset1[-(1:dlength*.3)]
XT2 <- dataset2[1:(dlength*.3)]
XV2 <- dataset2[-(1:dlength*.3)]
logmarg.kernMCimport(XT1,XV1)
library(matrixStats)
logmarg.kernMCimport(XT1,XV1)
logmarg.kernMCimport=function(X1,X2,iter = 50,importsize = 200)
{
R = quantile(X1,probs=c(.25,.75))
R=R[2]-R[1]
R = unname(R)
B = R / 1.35
Loglist <- c()
k <- length(X1)
n <- length(X2)
for(G in 1:iter)
{
cauchsamp<- rcauchy(importsize)
poscauchsamp <- cauchsamp[cauchsamp > 0]
importancepart <- ((2*B*(1/poscauchsamp^2)*(exp(-(B^2)/(poscauchsamp)^2)) / sqrt(pi))) / (2*dcauchy(poscauchsamp))
prodlist1<-c()
for(z in 1:length(poscauchsamp))
{
prod <- 0
for(j in 1:n)
{
sum <- 0
for(i in 1:k)
{
sum <- sum + exp(-.5*((X2[j]-X1[i])/poscauchsamp[z])^2)
}
prod <- prod + log(sum) + log((1/sqrt(2*pi))) - log((k*poscauchsamp[z]))
}
prodlist1[z] <- prod + log(importancepart[z])
}
Loglist[G] <- logSumExp(prodlist1)
}
return(Loglist)
}
logmarg.kernMCimport(XT1,XV1,iter = 50, importsize = 100)
logmarg.kernMCimport(XT1,XV1,iter = 1, importsize = 100)
logmarg.kernMCimport(XT2,XV2,iter = 1,importsize = 100)
ExpectedKernML <- logmarg.kernMCimport(XT1,XV1,iter = 1, importsize = 100) + logmarg.kernMCimport(XT2,XV2,iter = 1,importsize = 100)
ExpectedKernML2 <- logmarg.kernMCimport(c(XT1,XT2),c(XV1,XV2),iter = 1,importsize = 100)
ExpectedKernML - ExpectedKernML2
exp(ExpectedKernML - ExpectedKernML2)
dataset1 <- rcauchy(dlength)
dataset2 <- rcauchy(dlength)
for(i in 1:30)
{
dataset1 <- sample(dataset1)
dataset2 <- sample(dataset2)
XT1 <- dataset1[1:(dlength*.3)]
XV1 <- dataset1[-(1:dlength*.3)]
XT2 <- dataset2[1:(dlength*.3)]
XV2 <- dataset2[-(1:dlength*.3)]
ExpectedKernML <- logmarg.kernMCimport(XT1,XV1,iter = 1, importsize = 100) + logmarg.kernMCimport(XT2,XV2,iter = 1,importsize = 100)
ExpectedKernML2 <- logmarg.kernMCimport(c(XT1,XT2),c(XV1,XV2),iter = 1,importsize = 100)
LBF[i] <- ExpectedKernML - ExpectedKernML2
}
LBF
log(-Inf)
exp(inf)
exp(LBF)
?seq
seq(from = .3, to = .8, length = 30)
knitr::opts_chunk$set(echo = TRUE)
set.seed(10000)
#install.packages("rmutil")
library(rmutil)
source("MarginalLikIntfunctions.R")
set.seed(10000)
dlength <- 600
LBF <- c()
LBF2 <- c()
dataset1 <- rcauchy(dlength)
dataset2 <- rcauchy(dlength)
trainprop <- seq(from = .3, to = .8, length = 30)
for(i in 1:30)
{
dataset1 <- sample(dataset1)
dataset2 <- sample(dataset2)
XT1 <- dataset1[1:(dlength*trainprop[i])]
XV1 <- dataset1[-(1:dlength*trainprop[i])]
XT2 <- dataset2[1:(dlength*trainprop[i])]
XV2 <- dataset2[-(1:dlength*trainprop[i])]
ExpectedKernML <- logmarg.kernMCimport(XT1,XV1,iter = 1, importsize = 100) + logmarg.kernMCimport(XT2,XV2,iter = 1,importsize = 100)
ExpectedKernML2 <- logmarg.kernMCimport(c(XT1,XT2),c(XV1,XV2),iter = 1,importsize = 100)
LBF[i] <- ExpectedKernML - ExpectedKernML2
}
plot(LBF)
plot(LBF)
median(LBF)
LBF
sort(LBF)
median(sort(LBF))
set.seed(10000)
dlength <- 300
dataset1 <- rpareto(dlength, m=1.5, s=1.5)
dataset2 <- rpareto(dlength, m=1.5, s=1.5)
LBF <- c()
for(i in 1:30)
{
XT1 <- dataset1[1:(dlength*.trainprop[i])]
XV1 <- dataset1[-(1:(dlength*.trainprop[i]))]
XT2 <- dataset2[1:((dlength*.trainprop[i]))]
XV2 <- dataset2[-(1:(dlength*.trainprop[i]))]
ExpectedKernML <- logmarg.kern(XT1,XV1)[[2]] + logmarg.kern(XT2,XV2)[[2]]
ExpectedKernML2 <- logmarg.kern(c(XT1,XT2),c(XV1,XV2))[[2]]
LBF[i] <- ExpectedKernML - ExpectedKernML2
}
set.seed(10000)
dlength <- 300
dataset1 <- rpareto(dlength, m=1.5, s=1.5)
dataset2 <- rpareto(dlength, m=1.5, s=1.5)
LBF <- c()
trainprop <- seq(from = .3, to = .8, length = 30)
for(i in 1:30)
{
XT1 <- dataset1[1:(dlength*trainprop[i])]
XV1 <- dataset1[-(1:(dlength*trainprop[i]))]
XT2 <- dataset2[1:((dlength*trainprop[i]))]
XV2 <- dataset2[-(1:(dlength*trainprop[i]))]
ExpectedKernML <- logmarg.kern(XT1,XV1)[[2]] + logmarg.kern(XT2,XV2)[[2]]
ExpectedKernML2 <- logmarg.kern(c(XT1,XT2),c(XV1,XV2))[[2]]
LBF[i] <- ExpectedKernML - ExpectedKernML2
}
plot(LBF)
LBF
plot(LBF)
median(LBF)
mean(LBF)
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
gm_mean(exp(LBF))
mean(LBF)
median(LBF)
log(gm_mean(exp(LBF)))
log(gm_mean(exp(LBF)))
mean(LBF)
median(LBF)
set.seed(10000)
dlength <- 300
dataset1 <- rpareto(dlength, m=2.5, s=2.5)
dataset2 <- rpareto(dlength, m=2.5, s=2.5)
LBF <- c()
trainprop <- seq(from = .3, to = .8, length = 30)
for(i in 1:30)
{
XT1 <- dataset1[1:(dlength*trainprop[i])]
XV1 <- dataset1[-(1:(dlength*trainprop[i]))]
XT2 <- dataset2[1:((dlength*trainprop[i]))]
XV2 <- dataset2[-(1:(dlength*trainprop[i]))]
ExpectedKernML <- logmarg.kern(XT1,XV1)[[2]] + logmarg.kern(XT2,XV2)[[2]]
ExpectedKernML2 <- logmarg.kern(c(XT1,XT2),c(XV1,XV2))[[2]]
LBF[i] <- ExpectedKernML - ExpectedKernML2
}
plot(LBF)
log(gm_mean(exp(LBF)))
mean(LBF)
median(LBF)
plot(LBF)
log(gm_mean(exp(LBF)))
mean(LBF)
median(LBF)
LBF
exp(19)
set.seed(10000)
dlength <- 300
dataset1 <- rnorm(dlength)
dataset2 <- rnorm(dlength)
LBF <- c()
trainprop <- seq(from = .3, to = .8, length = 30)
for(i in 1:30)
{
XT1 <- dataset1[1:(dlength*trainprop[i])]
XV1 <- dataset1[-(1:(dlength*trainprop[i]))]
XT2 <- dataset2[1:((dlength*trainprop[i]))]
XV2 <- dataset2[-(1:(dlength*trainprop[i]))]
ExpectedKernML <- logmarg.kern(XT1,XV1)[[2]] + logmarg.kern(XT2,XV2)[[2]]
ExpectedKernML2 <- logmarg.kern(c(XT1,XT2),c(XV1,XV2))[[2]]
LBF[i] <- ExpectedKernML - ExpectedKernML2
}
plot(LBF)
plot(LBF)
log(gm_mean(exp(LBF)))
mean(LBF)
median(LBF)
ex(mean(LBF))
exp(mean(LBF))
exp(median(LBF))
#install.packages("rmutil")
library(matrixStats)
library(matrixStats)
logmarg.kern=function(y,x,prior=1){
out=optim(.4,loglike.KGauss,method="L-BFGS-B",lower=.0001,upper=5,y=y,x=x)
h=out$par
cons=-out$val
stat=integrate(integrand.Gauss,lower=0.0001,upper=5,y=y,x=x,cons=cons,prior=prior)$val
list(h,cons+log(stat))
}
loglike.KGauss=function(h,y,x){
n=length(x)
m=length(y)
nh=length(h)
M=t(matrix(y,m,n))
llike=1:nh
for(j in 1:nh){
M1=(x-M)/h[j]
M1=dnorm(M1)/h[j]
fhat=as.vector(M1 %*% matrix(1,m,1))/m
fhat[fhat<10^(-320)]=10^(-320)
llike[j]=sum(log(fhat))
}
-llike
}
integrand.Gauss=function(h,y,x,cons,prior){
n=length(x)
R=quantile(y,probs=c(.25,.75))
R=R[2]-R[1]
beta=R/1.35
beta1=beta*log(2)/sqrt(qgamma(.5,.5,1))
Prior=beta1*exp(-beta1/h)/h^2
if(prior==1) Prior=(2*beta/sqrt(pi))*h^(-2)*exp(-beta^2/h^2)
arg=-loglike.KGauss(h,y,x)-cons
arg[arg>700]=700
f=exp(arg)*Prior
f
}
logmarg.kernMC=function(X1,X2,iter = 10000)
{
require(matrixStats)
n <- length(X2)
k <- length(X1)
sum1 <- c()
sum1list <- c()
R = quantile(X1,probs=c(.25,.75))
R=R[2]-R[1]
R = unname(R)
B = R / 1.35
#browser()
for(i in 1:iter)
{
l <- sample(1:k,n, replace = TRUE)
sum1 <- sum((X2 - X1[l])^2)
sum1 <- lgamma((n-1)/2) - ((n-1)/2)*log(.5*(2*B^2 + sum1))
sum1list[i] <- sum1
}
logMCinteg <-log(B / sqrt(pi)) - (n/2)*log(2*pi) + logSumExp(sum1list) - log(iter)
return(logMCinteg)
}
logmarg.kernMCimport=function(X1,X2,iter = 50,importsize = 200)
{
R = quantile(X1,probs=c(.25,.75))
R=R[2]-R[1]
R = unname(R)
B = R / 1.35
Loglist <- c()
k <- length(X1)
n <- length(X2)
for(G in 1:iter)
{
cauchsamp<- rcauchy(importsize)
poscauchsamp <- cauchsamp[cauchsamp > 0]
importancepart <- ((2*B*(1/poscauchsamp^2)*(exp(-(B^2)/(poscauchsamp)^2)) / sqrt(pi))) / (2*dcauchy(poscauchsamp))
prodlist1<-c()
for(z in 1:length(poscauchsamp))
{
prod <- 0
for(j in 1:n)
{
sum <- 0
for(i in 1:k)
{
sum <- sum + exp(-.5*((X2[j]-X1[i])/poscauchsamp[z])^2)
}
prod <- prod + log(sum) + log((1/sqrt(2*pi))) - log((k*poscauchsamp[z]))
}
prodlist1[z] <- prod + log(importancepart[z])
}
Loglist[G] <- logSumExp(prodlist1)
}
return(Loglist)
}
