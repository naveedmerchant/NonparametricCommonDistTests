set.seed(1000)
dataset<- rexp(1000)
X1 <- dataset[1:(length(dataset)*.3)]
X2 <- dataset[-(1:(length(dataset)*.3))]
X1<-c(X1,-X1)
X2<-c(X2,-X2)
cauchsamp<- rcauchy(2000)
poscauchsamp <- cauchsamp[cauchsamp > 0]
#We draw from truncated cauchy, this is because we want our bandwidth to be always positive.
B <- (quantile(X2,probs = .75) - quantile(X2,probs = .25))/1.35
#Used in prior for bandwidth
importancepart <- ((2*B*(1/poscauchsamp^2)*(exp(-(B^2)/(poscauchsamp)^2)) / sqrt(pi))) / (2*dcauchy(poscauchsamp))
#Computes prior after adjusting for drawing from cauchy
#The next few lines evaluate the likelihood of the model under the gaussian kernel.
k <- length(X1)
n <- length(X2)
sum <- 0
prod <- 0
sum2 <- 0
prod2 <- 0
prodlist1<-c()
prodlist2<-c()
indiclist<-c()
for(z in 1:length(poscauchsamp))
{
prod <- 0
for(j in 1:n)
{
sum <- 0
sum2 <- 0
for(i in 1:k)
{
if((abs(X2[j]-X1[i])/poscauchsamp[z]) <= 1)
{
indiclist[i] <- 1
}
if((abs(X2[j]-X1[i])/poscauchsamp[z]) > 1)
{
indiclist[i] <- 0
}
kernpart <- .75*(1 - ((X2[j]-X1[i])/poscauchsamp[z])^2) * indiclist[i]
sum2 <- sum2 + kernpart
sum <- sum + exp(-.5*((X2[j]-X1[i])/poscauchsamp[z])^2)
}
prod <- prod + log(sum) + log((1/sqrt(2*pi))) + log((k*poscauchsamp[z])^(-1))
#if(sum2 == 0)
#{
#  print(X2[j])
#}
prod2 <- prod2 + log(sum2) + log((k*poscauchsamp[z])^(-1))
}
prodlist1[z] <- prod + log(importancepart[z])
prodlist2[z] <- prod2 + log(importancepart[z])
prod <- 0
prod2 <- 0
}
set.seed(500)
dataset1 <- rnorm(500)
dataset2 <- rnorm(500)
n <- length(dataset1)
m <- length(dataset2)
Jk1 <- 0
Jk2 <- 0
Jk3 <- 0
for(j in 1:n)
{
for(l in 1:n)
{
if(j != l)
Jk1 = Jk1 + exp(-.5 *((dataset1[j] - dataset1[l])/(sqrt(2)*b))^2)
}
}
for(j in 1:m)
{
for(l in 1:m)
{
if(j != l)
Jk2 = Jk2 + exp(-.5 *((dataset2[j] - dataset2[l])/(sqrt(2)*b))^2)
}
}
for(j in 1:n)
{
for(l in 1:m)
{
Jk3 = Jk3 + exp(-.5 *((dataset1[j] - dataset2[l])/(sqrt(2)*b))^2)
}
}
Jk = Jk1 / (n * (n-1)) + Jk2 / (m * (m-1)) + Jk3 * 2 / (n*m)
set.seed(500)
dataset1 <- rnorm(500)
dataset2 <- rnorm(500)
n <- length(dataset1)
m <- length(dataset2)
Jk1 <- 0
Jk2 <- 0
Jk3 <- 0
b <- 1
for(j in 1:n)
{
for(l in 1:n)
{
if(j != l)
Jk1 = Jk1 + exp(-.5 *((dataset1[j] - dataset1[l])/(sqrt(2)*b))^2)
}
}
for(j in 1:m)
{
for(l in 1:m)
{
if(j != l)
Jk2 = Jk2 + exp(-.5 *((dataset2[j] - dataset2[l])/(sqrt(2)*b))^2)
}
}
for(j in 1:n)
{
for(l in 1:m)
{
Jk3 = Jk3 + exp(-.5 *((dataset1[j] - dataset2[l])/(sqrt(2)*b))^2)
}
}
Jk = Jk1 / (n * (n-1)) + Jk2 / (m * (m-1)) + Jk3 * 2 / (n*m)
Jk
Jk
Jk / sqrt(1)
knitr::opts_chunk$set(echo = TRUE)
dataset <- rnorm(100,mean = 10, sd =1)
dataset <- rnorm(100,mean = 15, sd =1)
dataset1 <- rnorm(100,mean = 10, sd =1)
dataset2 <- rnorm(100,mean = 15, sd =1)
x <- c(dataset1, dataset2)
sample(x)
set.seed(300)
dataset1 <- rnorm(100,mean = 10, sd =1)
dataset2 <- rnorm(100,mean = 15, sd =1)
X <- c(dataset1, dataset2)
X <- sample(x)
set.seed(300)
dataset1 <- rnorm(100,mean = 10, sd =1)
dataset2 <- rnorm(100,mean = 15, sd =1)
X <- c(dataset1, dataset2)
dataset <- sample(x)
datasetperm <- sample(dataset)
X1 <- dataset[1:(length(dataset)*.3)]
X2 <- dataset[(length(dataset)*.3 + 1):(length(dataset)*.6)]
X3 <- dataset[(length(dataset)*.6 + 1):(length(dataset))]
GaussKernLik <- function(h,X1,X2)
{
prod <- 0
k <- length(X1)
n <- length(X2)
for(j in 1:n)
{
sum <- 0
for(i in 1:k)
{
sum <- sum + exp(-.5*((X2[j]-X1[i])/h)^2)
}
prod <- prod + log(sum) + log((1/sqrt(2*pi))) + log((k*h)^(-1))
}
return(prod)
}
h<-1
Optimumbandwidthreg <- optimize(GaussKernLik, X1 = X1, X2 = X2, lower = .00001, upper = 5, maximum = TRUE, tol = .001)
#Optimize runs pretty fast.
X1perm <- datasetperm[1:(length(dataset)*.3)]
X2perm <- datasetperm[(length(dataset)*.3 + 1):(length(dataset)*.6)]
X3perm <- datasetperm[(length(dataset)*.6 + 1):(length(dataset))]
Optimumbandwidthperm <- optimize(GaussKernLik, X1 = X1perm, X2 = X2perm, lower = .00001, upper = 5, maximum = TRUE, tol = .001)
Optimumbandwidthperm
BFPriorFree <- GaussKernLik(Optimumbandwidthreg$maximum,X1 = X1, X2 = X3) / GaussKernLik(Optimumbandwidthperm$maximum,X1 = X1perm, X2 = X3perm)
BFPriorFree
GaussKernLik(Optimumbandwidthreg$maximum,X1 = X1, X2 = X3)
GaussKernLik(Optimumbandwidthperm$maximum,X1 = X1perm, X2 = X3perm)
GaussKernLik(Optimumbandwidthreg$maximum,X1 = X1, X2 = X3perm) / GaussKernLik(Optimumbandwidthperm$maximum,X1 = X1perm, X2 = X3)
plot(dataset)
plot(X4)
plot(X3)
plot(X3perm)
set.seed(300)
dataset1 <- rnorm(1000,mean = 10, sd =1)
dataset2 <- rnorm(1000,mean = 15, sd =1)
X <- c(dataset1, dataset2)
dataset <- sample(x)
datasetperm <- sample(dataset)
X1 <- dataset[1:(length(dataset)*.3)]
X2 <- dataset[(length(dataset)*.3 + 1):(length(dataset)*.6)]
X3 <- dataset[(length(dataset)*.6 + 1):(length(dataset))]
GaussKernLik <- function(h,X1,X2)
{
prod <- 0
k <- length(X1)
n <- length(X2)
for(j in 1:n)
{
sum <- 0
for(i in 1:k)
{
sum <- sum + exp(-.5*((X2[j]-X1[i])/h)^2)
}
prod <- prod + log(sum) + log((1/sqrt(2*pi))) + log((k*h)^(-1))
}
return(prod)
}
h<-1
Optimumbandwidthreg <- optimize(GaussKernLik, X1 = X1, X2 = X2, lower = .00001, upper = 5, maximum = TRUE, tol = .001)
#Optimize runs pretty fast.
X1perm <- datasetperm[1:(length(dataset)*.3)]
X2perm <- datasetperm[(length(dataset)*.3 + 1):(length(dataset)*.6)]
X3perm <- datasetperm[(length(dataset)*.6 + 1):(length(dataset))]
Optimumbandwidthperm <- optimize(GaussKernLik, X1 = X1perm, X2 = X2perm, lower = .00001, upper = 5, maximum = TRUE, tol = .001)
BFPriorFree <- GaussKernLik(Optimumbandwidthreg$maximum,X1 = X1, X2 = X3) / GaussKernLik(Optimumbandwidthperm$maximum,X1 = X1perm, X2 = X3perm)
BFPriorFree
plot(dataset)
plot(X3)
plot(X3perm)
set.seed(300)
dataset1 <- rnorm(1000,mean = 10, sd =1)
dataset2 <- rexp(1000)
X <- c(dataset1, dataset2)
dataset <- sample(x)
datasetperm <- sample(dataset)
X1 <- dataset[1:(length(dataset)*.3)]
X2 <- dataset[(length(dataset)*.3 + 1):(length(dataset)*.6)]
X3 <- dataset[(length(dataset)*.6 + 1):(length(dataset))]
GaussKernLik <- function(h,X1,X2)
{
prod <- 0
k <- length(X1)
n <- length(X2)
for(j in 1:n)
{
sum <- 0
for(i in 1:k)
{
sum <- sum + exp(-.5*((X2[j]-X1[i])/h)^2)
}
prod <- prod + log(sum) + log((1/sqrt(2*pi))) + log((k*h)^(-1))
}
return(prod)
}
h<-1
Optimumbandwidthreg <- optimize(GaussKernLik, X1 = X1, X2 = X2, lower = .00001, upper = 5, maximum = TRUE, tol = .001)
#Optimize runs pretty fast.
X1perm <- datasetperm[1:(length(dataset)*.3)]
X2perm <- datasetperm[(length(dataset)*.3 + 1):(length(dataset)*.6)]
X3perm <- datasetperm[(length(dataset)*.6 + 1):(length(dataset))]
Optimumbandwidthperm <- optimize(GaussKernLik, X1 = X1perm, X2 = X2perm, lower = .00001, upper = 5, maximum = TRUE, tol = .001)
BFPriorFree <- GaussKernLik(Optimumbandwidthreg$maximum,X1 = X1, X2 = X3) / GaussKernLik(Optimumbandwidthperm$maximum,X1 = X1perm, X2 = X3perm)
BFPriorFree
plot(dataset)
plot(dataset)
dataset <- dataset1
datasetperm <- dataset2
X1 <- dataset[1:(length(dataset)*.3)]
X2 <- dataset[(length(dataset)*.3 + 1):(length(dataset)*.6)]
X3 <- dataset[(length(dataset)*.6 + 1):(length(dataset))]
h<-1
Optimumbandwidthreg <- optimize(GaussKernLik, X1 = X1, X2 = X2, lower = .00001, upper = 5, maximum = TRUE, tol = .001)
#Optimize runs pretty fast.
X1perm <- datasetperm[1:(length(dataset)*.3)]
X2perm <- datasetperm[(length(dataset)*.3 + 1):(length(dataset)*.6)]
X3perm <- datasetperm[(length(dataset)*.6 + 1):(length(dataset))]
Optimumbandwidthperm <- optimize(GaussKernLik, X1 = X1perm, X2 = X2perm, lower = .00001, upper = 5, maximum = TRUE, tol = .001)
BFPriorFree <- GaussKernLik(Optimumbandwidthreg$maximum,X1 = X1, X2 = X3) / GaussKernLik(Optimumbandwidthperm$maximum,X1 = X1perm, X2 = X3perm)
BFPriorFree
dataset <- dataset1
datasetperm <- dataset2
X1 <- dataset[1:(length(dataset)*.3)]
X2 <- dataset[(length(dataset)*.3 + 1):(length(dataset)*.6)]
X3 <- dataset[(length(dataset)*.6 + 1):(length(dataset))]
h<-1
Optimumbandwidthreg <- optimize(GaussKernLik, X1 = X1, X2 = X2, lower = .00001, upper = 5, maximum = TRUE, tol = .001)
#Optimize runs pretty fast.
X1perm <- datasetperm[1:(length(dataset)*.3)]
X2perm <- datasetperm[(length(dataset)*.3 + 1):(length(dataset)*.6)]
X3perm <- datasetperm[(length(dataset)*.6 + 1):(length(dataset))]
Optimumbandwidthperm <- optimize(GaussKernLik, X1 = X1perm, X2 = X2perm, lower = .00001, upper = 5, maximum = TRUE, tol = .001)
BFPriorFree <- GaussKernLik(Optimumbandwidthreg$maximum,X1 = X1, X2 = X3perm) / GaussKernLik(Optimumbandwidthperm$maximum,X1 = X1perm, X2 = X3)
BFPriorFree
set.seed(300)
dataset1 <- rnorm(10000,mean = 10, sd =1)
dataset2 <- rexp(10000)
dataset <- dataset1
datasetperm <- dataset2
X1 <- dataset[1:(length(dataset)*.3)]
X2 <- dataset[(length(dataset)*.3 + 1):(length(dataset)*.6)]
X3 <- dataset[(length(dataset)*.6 + 1):(length(dataset))]
h<-1
Optimumbandwidthreg <- optimize(GaussKernLik, X1 = X1, X2 = X2, lower = .00001, upper = 5, maximum = TRUE, tol = .001)
#Optimize runs pretty fast.
X1perm <- datasetperm[1:(length(dataset)*.3)]
X2perm <- datasetperm[(length(dataset)*.3 + 1):(length(dataset)*.6)]
X3perm <- datasetperm[(length(dataset)*.6 + 1):(length(dataset))]
Optimumbandwidthperm <- optimize(GaussKernLik, X1 = X1perm, X2 = X2perm, lower = .00001, upper = 5, maximum = TRUE, tol = .001)
BFPriorFree <- GaussKernLik(Optimumbandwidthreg$maximum,X1 = X1, X2 = X3perm) / GaussKernLik(Optimumbandwidthperm$maximum,X1 = X1perm, X2 = X3)
BFPriorFree
GaussKernLik(Optimumbandwidthreg$maximum,X1 = X1, X2 = X3perm)
GaussKernLik(Optimumbandwidthperm$maximum,X1 = X1perm, X2 = X3)
set.seed(300)
dataset1 <- rnorm(1000,mean = 10, sd =1)
dataset2 <- rexp(1000)
dataset <- dataset1
datasetperm <- dataset2
X1 <- dataset[1:(length(dataset)*.3)]
X2 <- dataset[(length(dataset)*.3 + 1):(length(dataset)*.6)]
X3 <- dataset[(length(dataset)*.6 + 1):(length(dataset))]
h<-1
Optimumbandwidthreg <- optimize(GaussKernLik, X1 = X1, X2 = X2, lower = .00001, upper = 5, maximum = TRUE, tol = .001)
#Optimize runs pretty fast but seems to be slow if datasets are large (understandable as f is v. tiresome to compute.
X1perm <- datasetperm[1:(length(dataset)*.3)]
X2perm <- datasetperm[(length(dataset)*.3 + 1):(length(dataset)*.6)]
X3perm <- datasetperm[(length(dataset)*.6 + 1):(length(dataset))]
Optimumbandwidthperm <- optimize(GaussKernLik, X1 = X1perm, X2 = X2perm, lower = .00001, upper = 5, maximum = TRUE, tol = .001)
BFPriorFree <- GaussKernLik(Optimumbandwidthreg$maximum,X1 = X1, X2 = X3perm) / GaussKernLik(Optimumbandwidthperm$maximum,X1 = X1perm, X2 = X3)
BFPriorFree
